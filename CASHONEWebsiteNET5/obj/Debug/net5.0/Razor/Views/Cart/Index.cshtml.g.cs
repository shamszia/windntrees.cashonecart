#pragma checksum "D:\projects\softwares\pos\PointOfSale\CASHONEWebsiteNET5\Views\Cart\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7d0ee88d800ba7b500398cd8f75379b9b0e497eb"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Cart_Index), @"mvc.1.0.view", @"/Views/Cart/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\projects\softwares\pos\PointOfSale\CASHONEWebsiteNET5\Views\_ViewImports.cshtml"
using Application;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\projects\softwares\pos\PointOfSale\CASHONEWebsiteNET5\Views\_ViewImports.cshtml"
using Application.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7d0ee88d800ba7b500398cd8f75379b9b0e497eb", @"/Views/Cart/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"03ea476b5db410d4405042b0a5ed991b4e6710c5", @"/Views/_ViewImports.cshtml")]
    public class Views_Cart_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Application.Models.Cart.CartViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\projects\softwares\pos\PointOfSale\CASHONEWebsiteNET5\Views\Cart\Index.cshtml"
  
    ViewData["Title"] = "My Shopping Cart Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("ColumnContentTitle", async() => {
                WriteLiteral("\r\n    <h1 class=\"my-4\">Shopping</h1>\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("Carousel", async() => {
                WriteLiteral("\r\n\r\n");
            }
            );
            WriteLiteral(@"
<div class=""row m-0 pt-2 pb-4"">
    <div class=""card container p-0"">
        <div class=""card-header table-result-message"">
            <span data-bind=""visible: getProcessing()""><i class=""fa fa-cog fa-spin fa-1x""></i></span>
            <span data-bind=""if: getResultMessage().length > 0""><span data-bind=""text: getResultMessage()""></span></span>
            <div data-bind=""if: getErrors().length > 0"">
                <ul class=""errorlist p-0"" data-bind=""foreach: { data: getObservableErrors(), as: 'error' }"">
                    <li><span data-bind=""text: errMessage""></span></li>
                </ul>
            </div>
        </div>
        <div class=""card-body"">
            <div class=""row mt-1 mb-1"">
                <div class='col-sm-12 col-md-6 col-lg-6 d-flex justify-content-start'>
                    <button data-bind='click: function() { window.open(""/product/index"", ""_self""); }' class='btn btn-primary m-1' type='button' title='Add new products in cart'><span>Add to Cart</span></butt");
            WriteLiteral(@"on>
                    <button data-bind='click: function() { window.open(""/cart/order"", ""_self""); }, enable: PlaceOrderAction()' class='btn btn-primary m-1' type='button' title='Place order'><span>Place Order</span></button>
                </div>
                <div class='col-sm-12 col-md-6 col-lg-6 d-flex justify-content-end'>
                    <button data-bind='click: function() { if (confirm(""Are you sure to empty cart?"")) { EmptyCart(); } }, enable: EmptyCartAction()' class='btn btn-danger m-1' type='button' title='Empty cart'><span>Empty Cart</span></button>
                    <button data-bind='click: function() { list(1); }' class='btn btn-primary m-1' type='button' title='List cart items'><span>List Cart</span></button>
                </div>
            </div>
            <div class=""table-responsive"">
                <table class=""table table-hover table-style-simple"">
                    <thead>
                        <tr>
                            <th class=""col-sm-12 col-m");
            WriteLiteral(@"d-2 col-lg-2"">
                                <span title=""Product"">Product</span>
                            </th>
                            <th class=""col-sm-12 col-md-2 col-lg-2"">
                                <span title=""Code & Title"">Code &amp; Title</span>
                            </th>
                            <th class=""col-sm-12 col-md-1 col-lg-1 text-right"">
                                <span title=""Quantity"">Quantity</span>
                            </th>
                            <th class=""col-sm-12 col-md-1 col-lg-1 text-right"">
                                <span title=""Price"">Price</span>
                            </th>
                            <th class=""col-sm-12 col-md-2 col-lg-2 text-right"">
                                <span title=""Update Quantity"">Update Quantity</span>
                            </th>
                            <th class=""col-sm-12 col-md-2 col-lg-2 text-right"">
                                <span title=""Line Total"">Tota");
            WriteLiteral(@"l</span>
                            </th>
                            <th class=""col-sm-12 col-md-2 col-lg-2""></th>
                        </tr>
                    </thead>
                    <tbody data-bind=""foreach: { data: getObservableRecords(), as: 'record' }"">
                        <tr>
                            <td><a href=""#"" data-bind=""attr: { href: '/home/product/' + ItemCode() }""><img class=""img-fluid store-grid-picture"" data-bind=""attr: { src: PicturePath(), title: ItemCode() + ' - ' + ItemName() }"" /></a></td>
                            <td class=""pt-4"" data-bind=""text: ItemCode() + ' - ' + ItemName()""></td>
                            <td class=""pt-4 text-center"" data-bind=""text: Quantity()""></td>
                            <td class=""pt-4 text-right"" data-bind=""text: $root.CurrencySymbol() + ((Cost() === null || Cost() === undefined) ? '0.00' : Cost().toFixed(2)) ""></td>
                            <td><input class=""form-control col-12 text-right"" type=""text"" title=""Update");
            WriteLiteral(@" cart quantity"" data-bind=""value: Quantity"" /></td>
                            <td class=""pt-4 text-right"" data-bind=""text: $root.CurrencySymbol() + ((LineTotal() === null || LineTotal() === undefined) ? '0.00' : LineTotal().toFixed(2)) ""></td>
                            <td class=""pr-0"">
                                <div class=""row m-0"">
                                    <div class=""col-sm-12 col-md-12 col-lg-12 m-0 p-1 d-flex justify-content-end"">
                                        <button class=""btn btn-secondary btn-sm m-1"" data-bind=""click: function(data, event) { $parents[0].UpdateCartItem(data); }"">update</button>
                                        <button class=""btn btn-danger btn-sm m-1"" data-bind=""click: function(data, event) { if (confirm('Are you sure to remove (' + data.ItemCode() + ' ' + data.ItemName() + ') item from cart?')) { $parents[0].RemoveCartItem(data); } }"">remove</button>
                                    </div>
                                </div>
      ");
            WriteLiteral(@"                      </td>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td></td>
                            <td></td>
                            <td class=""pt-4 text-center"" data-bind=""text: $root.QuantityTotal().toFixed(0)""></td>
                            <td></td>
                            <td></td>
                            <td class=""pt-4 text-right"" data-bind=""text: $root.CurrencySymbol() + $root.GrandTotal().toFixed(2)""></td>
                            <td></td>
                        </tr>
                    </tfoot>
                </table>
                <h4 data-bind=""text: '(Total Discount= ' + $root.CurrencySymbol() + $root.DiscountTotal().toFixed(2) + ')'""></h4>
            </div>
        </div>
");
            WriteLiteral("    </div>\r\n</div>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"

    <script type=""text/javascript"">

        layoutView.getObserverObject().PlaceOrderAction = ko.observable(true);
        layoutView.getObserverObject().EmptyCartAction = ko.observable(true);
        layoutView.getObserverObject().QuantityTotal = ko.observable(0);
        layoutView.getObserverObject().GrandTotal = ko.observable(0);
        layoutView.getObserverObject().DiscountTotal = ko.observable(0);


        layoutView.getObserverObject().OnCartAction = function (event, eventData) {

            if (eventData !== null && eventData !== undefined) {

                if (eventData.data !== null && eventData.data !== undefined) {

                    if (eventData.data.target !== null && eventData.data.target !== undefined) {

                        if (eventData.data.target === 'EmptyCart') {

                            layoutView.getObserverObject().ResultMessage(""Cart is empty."");
                            layoutView.getObserverObject().PlaceOrderAction(false);
            ");
                WriteLiteral(@"                layoutView.getObserverObject().EmptyCartAction(false);

                            layoutView.getObserverObject().clearRecords();
                        }
                    }
                }

                if (eventData.request !== null && eventData.request !== undefined) {

                    if (eventData.request === 'delete') {

                        if (layoutView.getObserverObject().Records().length === 0) {

                            layoutView.getObserverObject().ResultMessage(""Cart is empty."");
                            layoutView.getObserverObject().PlaceOrderAction(false);
                            layoutView.getObserverObject().EmptyCartAction(false);
                        }
                    }
                }
            }

            layoutView.getObserverObject().CalculateTotal();
        };

        layoutView.getObserverObject().OnListCartAction = function (event, eventData) {

            if (eventData !== null && eventData !==");
                WriteLiteral(@" undefined) {

                if (eventData.request !== null && eventData.request !== undefined) {

                    if (eventData.request === 'list') {

                        if (layoutView.getObserverObject().Records().length > 0) {

                            layoutView.getObserverObject().PlaceOrderAction(true);
                            layoutView.getObserverObject().EmptyCartAction(true);

                            layoutView.getObserverObject().CalculateTotal();
                        }
                        else {

                            layoutView.getObserverObject().PlaceOrderAction(false);
                            layoutView.getObserverObject().EmptyCartAction(false);
                        }
                    }
                }
            }
        };

        layoutView.getObserverObject().CalculateTotal = function () {

            var grandTotal = 0;
            var quantityTotal = 0;
            var discountTotal = 0;
            for (var ");
                WriteLiteral(@"i = 0; i < layoutView.getObserverObject().Records().length; i++) {

                grandTotal += (layoutView.getObserverObject().Records()[i]).LineTotal();
                quantityTotal += (layoutView.getObserverObject().Records()[i]).Quantity();
                discountTotal += ((layoutView.getObserverObject().Records()[i]).Quantity() * (layoutView.getObserverObject().Records()[i]).Discount());
            }

            layoutView.getObserverObject().GrandTotal(grandTotal);
            layoutView.getObserverObject().QuantityTotal(quantityTotal);
            layoutView.getObserverObject().DiscountTotal(discountTotal);
        };
        
        layoutView.subscribeEvent('record.after.rendering.view.CRUD.WindnTrees', layoutView.getObserverObject().OnCartAction);
        layoutView.subscribeEvent('records.after.rendering.view.CRUD.WindnTrees', layoutView.getObserverObject().OnListCartAction);

        $(function () {
            layoutView.list(1);
        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Application.Models.Cart.CartViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
